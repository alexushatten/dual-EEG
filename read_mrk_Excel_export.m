function [MarkerTimeStart, MarkerTimeEnd, MarkerLabel] = read_mrk_Excel_export(Filename)
%read_mrk_Excel_export reads .mrk file generated by Cartool and outputs all numeric
%and non-numeric markers
%
% FUNCTION VERY SIMILAR TO read_mrk_file.m THAT DEALS WITH .mrk FILES THAT
% WERE MANUALLY CHANGED VIA EXCEL (AND MIGHT CONTAIN TABS DELIMITERS)
%
% USAGE
% [MarkerTimeStart, MarkerTimeEnd, MarkerLabel] = read_mrk_file(Filename)
%
% INPUTS
% Filename: string, full file path
%
% OUTPUTS
% MarkerTimeStart: double, marker beginning in milliseconds
% MarkerTimeEnd: double, marker end in milliseconds
% MarkerLabel: cell of strings, marker names
%
% Renaud Marquis @ FBM lab, December 2018

[Path File Ext] = fileparts(Filename);
% if ~strcmpi(strtrim(Ext),'.mrk')
%     error('File extension of %s is not ".mrk"',Filename);
% end

% Initialize variables.
startRow = 2;

% Read columns of data as strings:
formatSpec = '%13s%12s%s%[^\n\r]';

% Open the text file.
fileID = fopen(Filename,'r');

% Read columns of data according to format string.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '\t', 'WhiteSpace', '', 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

% Remove white space around all cell columns.
dataArray{3} = strtrim(dataArray{3});

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric strings to numbers.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2]);
rawCellColumns = raw(:, 3);

% Allocate imported array to column variable names
MarkerTimeStart = cell2mat(rawNumericColumns(:, 1));
MarkerTimeEnd = cell2mat(rawNumericColumns(:, 2));
MarkerLabel = rawCellColumns(:, 1);

end
